/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InvestmentFirmService } from "../investmentFirm.service";
import { InvestmentFirmCreateInput } from "./InvestmentFirmCreateInput";
import { InvestmentFirm } from "./InvestmentFirm";
import { InvestmentFirmFindManyArgs } from "./InvestmentFirmFindManyArgs";
import { InvestmentFirmWhereUniqueInput } from "./InvestmentFirmWhereUniqueInput";
import { InvestmentFirmUpdateInput } from "./InvestmentFirmUpdateInput";

export class InvestmentFirmControllerBase {
  constructor(protected readonly service: InvestmentFirmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InvestmentFirm })
  async createInvestmentFirm(
    @common.Body() data: InvestmentFirmCreateInput
  ): Promise<InvestmentFirm> {
    return await this.service.createInvestmentFirm({
      data: data,
      select: {
        createdAt: true,
        establishedDate: true,
        firmType: true,
        fundsManaged: true,
        id: true,
        name: true,
        totalAssets: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InvestmentFirm] })
  @ApiNestedQuery(InvestmentFirmFindManyArgs)
  async investmentFirms(
    @common.Req() request: Request
  ): Promise<InvestmentFirm[]> {
    const args = plainToClass(InvestmentFirmFindManyArgs, request.query);
    return this.service.investmentFirms({
      ...args,
      select: {
        createdAt: true,
        establishedDate: true,
        firmType: true,
        fundsManaged: true,
        id: true,
        name: true,
        totalAssets: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InvestmentFirm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async investmentFirm(
    @common.Param() params: InvestmentFirmWhereUniqueInput
  ): Promise<InvestmentFirm | null> {
    const result = await this.service.investmentFirm({
      where: params,
      select: {
        createdAt: true,
        establishedDate: true,
        firmType: true,
        fundsManaged: true,
        id: true,
        name: true,
        totalAssets: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InvestmentFirm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInvestmentFirm(
    @common.Param() params: InvestmentFirmWhereUniqueInput,
    @common.Body() data: InvestmentFirmUpdateInput
  ): Promise<InvestmentFirm | null> {
    try {
      return await this.service.updateInvestmentFirm({
        where: params,
        data: data,
        select: {
          createdAt: true,
          establishedDate: true,
          firmType: true,
          fundsManaged: true,
          id: true,
          name: true,
          totalAssets: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InvestmentFirm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInvestmentFirm(
    @common.Param() params: InvestmentFirmWhereUniqueInput
  ): Promise<InvestmentFirm | null> {
    try {
      return await this.service.deleteInvestmentFirm({
        where: params,
        select: {
          createdAt: true,
          establishedDate: true,
          firmType: true,
          fundsManaged: true,
          id: true,
          name: true,
          totalAssets: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
