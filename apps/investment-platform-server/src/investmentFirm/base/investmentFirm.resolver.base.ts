/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InvestmentFirm } from "./InvestmentFirm";
import { InvestmentFirmCountArgs } from "./InvestmentFirmCountArgs";
import { InvestmentFirmFindManyArgs } from "./InvestmentFirmFindManyArgs";
import { InvestmentFirmFindUniqueArgs } from "./InvestmentFirmFindUniqueArgs";
import { CreateInvestmentFirmArgs } from "./CreateInvestmentFirmArgs";
import { UpdateInvestmentFirmArgs } from "./UpdateInvestmentFirmArgs";
import { DeleteInvestmentFirmArgs } from "./DeleteInvestmentFirmArgs";
import { InvestmentFirmService } from "../investmentFirm.service";
@graphql.Resolver(() => InvestmentFirm)
export class InvestmentFirmResolverBase {
  constructor(protected readonly service: InvestmentFirmService) {}

  async _investmentFirmsMeta(
    @graphql.Args() args: InvestmentFirmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InvestmentFirm])
  async investmentFirms(
    @graphql.Args() args: InvestmentFirmFindManyArgs
  ): Promise<InvestmentFirm[]> {
    return this.service.investmentFirms(args);
  }

  @graphql.Query(() => InvestmentFirm, { nullable: true })
  async investmentFirm(
    @graphql.Args() args: InvestmentFirmFindUniqueArgs
  ): Promise<InvestmentFirm | null> {
    const result = await this.service.investmentFirm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InvestmentFirm)
  async createInvestmentFirm(
    @graphql.Args() args: CreateInvestmentFirmArgs
  ): Promise<InvestmentFirm> {
    return await this.service.createInvestmentFirm({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InvestmentFirm)
  async updateInvestmentFirm(
    @graphql.Args() args: UpdateInvestmentFirmArgs
  ): Promise<InvestmentFirm | null> {
    try {
      return await this.service.updateInvestmentFirm({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InvestmentFirm)
  async deleteInvestmentFirm(
    @graphql.Args() args: DeleteInvestmentFirmArgs
  ): Promise<InvestmentFirm | null> {
    try {
      return await this.service.deleteInvestmentFirm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
