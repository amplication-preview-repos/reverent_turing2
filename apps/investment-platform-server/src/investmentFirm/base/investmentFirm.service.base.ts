/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, InvestmentFirm as PrismaInvestmentFirm } from "@prisma/client";

export class InvestmentFirmServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InvestmentFirmCountArgs, "select">
  ): Promise<number> {
    return this.prisma.investmentFirm.count(args);
  }

  async investmentFirms(
    args: Prisma.InvestmentFirmFindManyArgs
  ): Promise<PrismaInvestmentFirm[]> {
    return this.prisma.investmentFirm.findMany(args);
  }
  async investmentFirm(
    args: Prisma.InvestmentFirmFindUniqueArgs
  ): Promise<PrismaInvestmentFirm | null> {
    return this.prisma.investmentFirm.findUnique(args);
  }
  async createInvestmentFirm(
    args: Prisma.InvestmentFirmCreateArgs
  ): Promise<PrismaInvestmentFirm> {
    return this.prisma.investmentFirm.create(args);
  }
  async updateInvestmentFirm(
    args: Prisma.InvestmentFirmUpdateArgs
  ): Promise<PrismaInvestmentFirm> {
    return this.prisma.investmentFirm.update(args);
  }
  async deleteInvestmentFirm(
    args: Prisma.InvestmentFirmDeleteArgs
  ): Promise<PrismaInvestmentFirm> {
    return this.prisma.investmentFirm.delete(args);
  }
}
