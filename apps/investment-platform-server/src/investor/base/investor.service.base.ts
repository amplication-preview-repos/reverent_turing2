/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Investor as PrismaInvestor } from "@prisma/client";

export class InvestorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.InvestorCountArgs, "select">): Promise<number> {
    return this.prisma.investor.count(args);
  }

  async investors(
    args: Prisma.InvestorFindManyArgs
  ): Promise<PrismaInvestor[]> {
    return this.prisma.investor.findMany(args);
  }
  async investor(
    args: Prisma.InvestorFindUniqueArgs
  ): Promise<PrismaInvestor | null> {
    return this.prisma.investor.findUnique(args);
  }
  async createInvestor(
    args: Prisma.InvestorCreateArgs
  ): Promise<PrismaInvestor> {
    return this.prisma.investor.create(args);
  }
  async updateInvestor(
    args: Prisma.InvestorUpdateArgs
  ): Promise<PrismaInvestor> {
    return this.prisma.investor.update(args);
  }
  async deleteInvestor(
    args: Prisma.InvestorDeleteArgs
  ): Promise<PrismaInvestor> {
    return this.prisma.investor.delete(args);
  }
}
