/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MarketAnalysis } from "./MarketAnalysis";
import { MarketAnalysisCountArgs } from "./MarketAnalysisCountArgs";
import { MarketAnalysisFindManyArgs } from "./MarketAnalysisFindManyArgs";
import { MarketAnalysisFindUniqueArgs } from "./MarketAnalysisFindUniqueArgs";
import { CreateMarketAnalysisArgs } from "./CreateMarketAnalysisArgs";
import { UpdateMarketAnalysisArgs } from "./UpdateMarketAnalysisArgs";
import { DeleteMarketAnalysisArgs } from "./DeleteMarketAnalysisArgs";
import { MarketAnalysisService } from "../marketAnalysis.service";
@graphql.Resolver(() => MarketAnalysis)
export class MarketAnalysisResolverBase {
  constructor(protected readonly service: MarketAnalysisService) {}

  async _marketAnalysesMeta(
    @graphql.Args() args: MarketAnalysisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MarketAnalysis])
  async marketAnalyses(
    @graphql.Args() args: MarketAnalysisFindManyArgs
  ): Promise<MarketAnalysis[]> {
    return this.service.marketAnalyses(args);
  }

  @graphql.Query(() => MarketAnalysis, { nullable: true })
  async marketAnalysis(
    @graphql.Args() args: MarketAnalysisFindUniqueArgs
  ): Promise<MarketAnalysis | null> {
    const result = await this.service.marketAnalysis(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MarketAnalysis)
  async createMarketAnalysis(
    @graphql.Args() args: CreateMarketAnalysisArgs
  ): Promise<MarketAnalysis> {
    return await this.service.createMarketAnalysis({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MarketAnalysis)
  async updateMarketAnalysis(
    @graphql.Args() args: UpdateMarketAnalysisArgs
  ): Promise<MarketAnalysis | null> {
    try {
      return await this.service.updateMarketAnalysis({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MarketAnalysis)
  async deleteMarketAnalysis(
    @graphql.Args() args: DeleteMarketAnalysisArgs
  ): Promise<MarketAnalysis | null> {
    try {
      return await this.service.deleteMarketAnalysis(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
